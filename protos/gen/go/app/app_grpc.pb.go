// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: app/app.proto

package appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PvzServiceClient is the client API for PvzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PvzServiceClient interface {
	CreatePvz(ctx context.Context, in *CreatePvzRequest, opts ...grpc.CallOption) (*CreatePvzResponse, error)
	GetPvzByID(ctx context.Context, in *GetPvzByIDRequest, opts ...grpc.CallOption) (*GetPvzByIDResponse, error)
	UpdatePvz(ctx context.Context, in *UpdatePvzRequest, opts ...grpc.CallOption) (*UpdatePvzResponse, error)
	DeletePvz(ctx context.Context, in *DeletePvzRequest, opts ...grpc.CallOption) (*DeletePvzResponse, error)
}

type pvzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPvzServiceClient(cc grpc.ClientConnInterface) PvzServiceClient {
	return &pvzServiceClient{cc}
}

func (c *pvzServiceClient) CreatePvz(ctx context.Context, in *CreatePvzRequest, opts ...grpc.CallOption) (*CreatePvzResponse, error) {
	out := new(CreatePvzResponse)
	err := c.cc.Invoke(ctx, "/app.PvzService/CreatePvz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) GetPvzByID(ctx context.Context, in *GetPvzByIDRequest, opts ...grpc.CallOption) (*GetPvzByIDResponse, error) {
	out := new(GetPvzByIDResponse)
	err := c.cc.Invoke(ctx, "/app.PvzService/GetPvzByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) UpdatePvz(ctx context.Context, in *UpdatePvzRequest, opts ...grpc.CallOption) (*UpdatePvzResponse, error) {
	out := new(UpdatePvzResponse)
	err := c.cc.Invoke(ctx, "/app.PvzService/UpdatePvz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pvzServiceClient) DeletePvz(ctx context.Context, in *DeletePvzRequest, opts ...grpc.CallOption) (*DeletePvzResponse, error) {
	out := new(DeletePvzResponse)
	err := c.cc.Invoke(ctx, "/app.PvzService/DeletePvz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PvzServiceServer is the server API for PvzService service.
// All implementations must embed UnimplementedPvzServiceServer
// for forward compatibility
type PvzServiceServer interface {
	CreatePvz(context.Context, *CreatePvzRequest) (*CreatePvzResponse, error)
	GetPvzByID(context.Context, *GetPvzByIDRequest) (*GetPvzByIDResponse, error)
	UpdatePvz(context.Context, *UpdatePvzRequest) (*UpdatePvzResponse, error)
	DeletePvz(context.Context, *DeletePvzRequest) (*DeletePvzResponse, error)
	mustEmbedUnimplementedPvzServiceServer()
}

// UnimplementedPvzServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPvzServiceServer struct {
}

func (UnimplementedPvzServiceServer) CreatePvz(context.Context, *CreatePvzRequest) (*CreatePvzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePvz not implemented")
}
func (UnimplementedPvzServiceServer) GetPvzByID(context.Context, *GetPvzByIDRequest) (*GetPvzByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPvzByID not implemented")
}
func (UnimplementedPvzServiceServer) UpdatePvz(context.Context, *UpdatePvzRequest) (*UpdatePvzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePvz not implemented")
}
func (UnimplementedPvzServiceServer) DeletePvz(context.Context, *DeletePvzRequest) (*DeletePvzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePvz not implemented")
}
func (UnimplementedPvzServiceServer) mustEmbedUnimplementedPvzServiceServer() {}

// UnsafePvzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PvzServiceServer will
// result in compilation errors.
type UnsafePvzServiceServer interface {
	mustEmbedUnimplementedPvzServiceServer()
}

func RegisterPvzServiceServer(s grpc.ServiceRegistrar, srv PvzServiceServer) {
	s.RegisterService(&PvzService_ServiceDesc, srv)
}

func _PvzService_CreatePvz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePvzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).CreatePvz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.PvzService/CreatePvz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).CreatePvz(ctx, req.(*CreatePvzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_GetPvzByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPvzByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).GetPvzByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.PvzService/GetPvzByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).GetPvzByID(ctx, req.(*GetPvzByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_UpdatePvz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePvzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).UpdatePvz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.PvzService/UpdatePvz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).UpdatePvz(ctx, req.(*UpdatePvzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PvzService_DeletePvz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePvzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PvzServiceServer).DeletePvz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.PvzService/DeletePvz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PvzServiceServer).DeletePvz(ctx, req.(*DeletePvzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PvzService_ServiceDesc is the grpc.ServiceDesc for PvzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PvzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.PvzService",
	HandlerType: (*PvzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePvz",
			Handler:    _PvzService_CreatePvz_Handler,
		},
		{
			MethodName: "GetPvzByID",
			Handler:    _PvzService_GetPvzByID_Handler,
		},
		{
			MethodName: "UpdatePvz",
			Handler:    _PvzService_UpdatePvz_Handler,
		},
		{
			MethodName: "DeletePvz",
			Handler:    _PvzService_DeletePvz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app.proto",
}
