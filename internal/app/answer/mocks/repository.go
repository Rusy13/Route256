// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source ./service.go -destination=./mocks/repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	answer "HW1/internal/app/answer"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// sendAsyncMessage mocks base method.
func (m *MockSender) sendAsyncMessage(message answer.PaymentMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendAsyncMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendAsyncMessage indicates an expected call of sendAsyncMessage.
func (mr *MockSenderMockRecorder) sendAsyncMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendAsyncMessage", reflect.TypeOf((*MockSender)(nil).sendAsyncMessage), message)
}

// sendMessage mocks base method.
func (m *MockSender) sendMessage(message answer.PaymentMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendMessage indicates an expected call of sendMessage.
func (mr *MockSenderMockRecorder) sendMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendMessage", reflect.TypeOf((*MockSender)(nil).sendMessage), message)
}

// sendMessages mocks base method.
func (m *MockSender) sendMessages(messages []answer.PaymentMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendMessages", messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendMessages indicates an expected call of sendMessages.
func (mr *MockSenderMockRecorder) sendMessages(messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendMessages", reflect.TypeOf((*MockSender)(nil).sendMessages), messages)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAnswer mocks base method.
func (m *MockRepository) GetAnswer(URL, Method string) *answer.Answer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswer", URL, Method)
	ret0, _ := ret[0].(*answer.Answer)
	return ret0
}

// GetAnswer indicates an expected call of GetAnswer.
func (mr *MockRepositoryMockRecorder) GetAnswer(URL, Method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswer", reflect.TypeOf((*MockRepository)(nil).GetAnswer), URL, Method)
}

// VerifyAnswer mocks base method.
func (m *MockRepository) VerifyAnswer(URL, Method string, success bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAnswer", URL, Method, success)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAnswer indicates an expected call of VerifyAnswer.
func (mr *MockRepositoryMockRecorder) VerifyAnswer(URL, Method, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAnswer", reflect.TypeOf((*MockRepository)(nil).VerifyAnswer), URL, Method, success)
}
